#define MAX 10000 
// at: arrival time, bt: burst time 
// ct: completion time, tat: turnaround time 
// wt: waiting time 
typedef struct process 
{ 
 int id, at, bt, ct, tat, wt; 
}pr; 
void scheduler(pr p[], int n) 
{ 
 for (int i = 0; i < n - 1; i++) 
 { 
 for (int j = 0; j < n - i - 1; j++) 
 { 
 if (p[j].at > p[j + 1].at) 
 { 
 pr tmp = p[j]; 
 p[j] = p[j + 1]; 
 p[j + 1] = tmp; 
 } 
 } 
 } 
 int k = 0, t = 0; 
 while (k < n) 
 { 
 if (p[k].at <= t) 
 { 
 int tmp = p[k].bt; 
 while(tmp != 0) 
 { 
 tmp--; 
 t++; 
 } 
 p[k].ct = t; 
 k++; 
 } 
 else 
 { 
 t++; 
 } 
 } 
 printf("The schedule of processing is:\n"); 
 int sumt = 0, sumw = 0; 
 for (int i = 0; i < n; i++) 
 { 
 printf("%i ", p[i].id); 
 p[i].tat = p[i].ct - p[i].at; 
 sumt += p[i].tat; 
 p[i].wt = p[i].tat - p[i].bt; 
 sumw += p[i].wt; 
 } 
 printf("\nAverage turnaround time is: %lf\n", ((double)sumt / n)); 
 printf("Average waiting time is: %lf\n", ((double)sumw / n)); 
} 
int main() 
{ 
 int n; 
 printf("Enter the number of processes: "); 
 scanf("%i", &n); 
 pr p[MAX]; 
 for (int i = 0; i < n; i++) 
 { 
 printf("Process %i:\n", i + 1); 
 printf("Enter process id: "); 
 scanf("%i", &p[i].id); 
 printf("Enter process arrival time: "); 
 scanf("%i", &p[i].at); 
 printf("Enter process burst time: "); 
 scanf("%i", &p[i].bt); 
 printf("\n"); 
 } 
 scheduler(p, n); 
}
